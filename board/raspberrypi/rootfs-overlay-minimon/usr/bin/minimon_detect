#!/usr/bin/python
import cv2 as cv
import time
import numpy as np
import os


save_root = '/usr/html/eventdata'


def detect(img, cascade):
    rects = cascade.detectMultiScale(img, scaleFactor=1.3, minNeighbors=4, minSize=(30, 30),
                                     flags=cv.CASCADE_SCALE_IMAGE)
    if len(rects) == 0:
        return []
    rects[:,2:] += rects[:,:2]
    return rects


def draw_rects(img, rects, color):
    for x1, y1, x2, y2 in rects:
        cv.rectangle(img, (x1, y1), (x2, y2), color, 2)


def draw_str(dst, target, s):
    x, y = target
    cv.putText(dst, s, (x+1, y+1), cv.FONT_HERSHEY_PLAIN, 1.0, (0, 0, 0), thickness = 2, lineType=cv.LINE_AA)
    cv.putText(dst, s, (x, y), cv.FONT_HERSHEY_PLAIN, 1.0, (255, 255, 255), lineType=cv.LINE_AA)


def main():
    cap = cv.VideoCapture('rtmp://127.0.0.1:9305/cam/magic')
    cascade = cv.CascadeClassifier('/data/alt.xml')

    print 'Loaded'

    last_frame, last_time = cap.read()[1], time.time()

    last_note_timestamp = -1
    note_name = None

    while True:
        cur_frame, cur_time = cap.read()[1], time.time()
        if cur_time - last_time < 1.:
            continue
        diff_mat = np.abs(np.int32(cur_frame) - np.int32(last_frame))
        diff_val = diff_mat.sum()
        if diff_val > diff_mat.size * 10:
            last_note_timestamp = cur_time
        if cur_time - last_note_timestamp < 5.1:
            if note_name is None:
                print 'Movement detected at {}'.format(time.time())
                lt = time.localtime()
                note_name = '{:02d}{:02d}{:02d}-{:02d}{:02d}{:02d}'.format(lt.tm_year, lt.tm_mon, lt.tm_mday,
                        lt.tm_hour, lt.tm_min, lt.tm_sec)
                with open(os.path.join(save_root, 'meta'), 'a') as f:
                    f.write('{}\n'.format(note_name))
                os.mkdir(os.path.join(save_root, note_name))

            frame_name = str(int(cur_time * 1000))
            delta = float(diff_val) / float(diff_mat.size)

            with open(os.path.join(save_root, note_name, 'meta'), 'a') as f:
                f.write('{} {} {}\n'.format(frame_name, delta, time.time() - cur_time))


            gray = cv.cvtColor(last_frame, cv.COLOR_BGR2GRAY)
            gray = cv.equalizeHist(gray)
            rects = detect(gray, cascade)
            print 'Detected {} faces'.format(len(rects))
            draw_rects(last_frame, rects, (0, 255, 0))

            draw_str(last_frame, (20, 20), frame_name)
            cv.imwrite(os.path.join(save_root, note_name, frame_name + 'orig.jpg'), last_frame)

            draw_str(diff_mat, (20, 20),
                    'diff = {:.3f}, time = {:.3f} ms'.format(delta, (time.time() - cur_time) * 1000))
            cv.imwrite(os.path.join(save_root, note_name, frame_name + 'diff.jpg'), diff_mat)
        elif note_name is not None:
            print 'Movement detection stopped'
            note_name = None
        last_frame, last_time = cur_frame, cur_time


if __name__ == '__main__':
    main()
