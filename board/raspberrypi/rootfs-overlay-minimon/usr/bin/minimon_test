#!/usr/bin/python
import cv2 as cv
import time
import numpy as np
import os


save_root = '/usr/html/eventdata'

class_names = ['Other', 'Paper', 'Rock', 'Scissors']


def draw_rects(img, rects, color):
    for x1, y1, x2, y2 in rects:
        cv.rectangle(img, (x1, y1), (x2, y2), color, 2)


def draw_str(dst, target, s, scale=1., color=(255, 255, 255)):
    x, y = target
    cv.putText(dst, s, (x+1, y+1), cv.FONT_HERSHEY_PLAIN, scale, (0, 0, 0), thickness = 2, lineType=cv.LINE_AA)
    cv.putText(dst, s, (x, y), cv.FONT_HERSHEY_PLAIN, scale, color, lineType=cv.LINE_AA)


def classify(x, netf, netc):
    x = cv.resize(x, (224, 224)).transpose(2, 0, 1).reshape(1, 3, 224, 224)[:,::-1] / 255.
    netf.setInput(x)
    features = netf.forward().mean(axis=(2, 3))
    netc.setInput(features)
    logits = netc.forward()
    return logits[0]


def main():
    cap = cv.VideoCapture('/data/test_set.mp4')

    netf = cv.dnn.readNetFromONNX('/data/model/features.onnx')
    netc = cv.dnn.readNetFromONNX('/data/model/classifier.onnx')

    print 'Loaded'

    last_frame, last_time = cap.read()[1], time.time()

    note_name = 'test'
    if os.path.exists(os.path.join(save_root, note_name)):
        import shutil
        shutil.rmtree(os.path.join(save_root, note_name))
    os.mkdir(os.path.join(save_root, note_name))

    frame_idx = 0
    while True:
        for _ in range(30):
            cur_frame, cur_time = cap.read()[1], time.time()

        if cur_frame is None:
            break

        frame_name = 'test{:03d}'.format(frame_idx)
        frame_idx += 1
        with open(os.path.join(save_root, note_name, 'meta'), 'a') as f:
            f.write('{}\n'.format(frame_name))

        logits = classify(last_frame, netf, netc)
        pred = logits.argmax()
        print 'Detect results {} {}'.format(str(logits), class_names[pred])

        draw_str(last_frame, (20, 80), class_names[pred], scale=3., color=(0, 0, 255))
        eltime = (time.time() - cur_time)
        draw_str(last_frame, (20, 20),
                'time = {:.3f} ms, fps = {:.3f}'.format(eltime * 1000, 1. / eltime))

        cv.imwrite(os.path.join(save_root, note_name, frame_name + 'orig.jpg'), last_frame)
        cv.imwrite(os.path.join(save_root, note_name, frame_name + 'diff.jpg'), last_frame)
        print 'time = {:.3f} ms, fps = {:.3f}'.format(eltime * 1000, 1. / eltime)

        last_frame, last_time = cur_frame, cur_time


if __name__ == '__main__':
    main()
